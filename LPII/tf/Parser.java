/* Generated By:JavaCC: Do not edit this line. Parser.java */
package tf;

public class Parser implements ParserConstants {

  static final public IASTStatement Start() throws ParseException {
  IASTStatement c;
    c = cmd();
    jj_consume_token(EOL);
                             {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTStatement cmd() throws ParseException {
  IASTStatement l, r ;
    l = state();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQ:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEQ);
      r = cmd();
                                        l = new ASTSeq(l, r) ;
    }
          {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTStatement state() throws ParseException {
  IASTStatement l, r, s ;
  ASTIf ifstat ;
  IASTExpression exp1, exp2 ;
  ASTDeclStatement d ;
  String id ;
  ASTCallProc pc ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
    case VAR:
    case DEREF:
    case TRUE:
    case FALSE:
    case DO:
    case LPAR:
    case FUN:
    case PROC:
    case ARRAY:
    case LBRACK:
    case LENGTH:
    case READINT:
    case READSTR:
    case STRING:
    case CONSTANT:
    case ID:
      exp1 = callFun();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        exp2 = decl();
                l = new ASTAssign(exp1, exp2) ;
                {if (true) return l ;}
        break;
      case LPAR:
        jj_consume_token(LPAR);
                   pc = new ASTCallProc(exp1) ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECL:
        case MINUS:
        case NOT:
        case VAR:
        case DEREF:
        case TRUE:
        case FALSE:
        case DO:
        case IF:
        case LPAR:
        case FUN:
        case PROC:
        case ARRAY:
        case LBRACK:
        case LENGTH:
        case READINT:
        case READSTR:
        case STRING:
        case CONSTANT:
        case ID:
          exp2 = decl();
                                                                  pc.addParam(exp2) ;
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            jj_consume_token(COMMA);
            exp2 = decl();
                                   pc.addParam(exp2) ;
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
                                                                      {if (true) return pc ;}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      exp1 = decl();
      jj_consume_token(RPAR);
      jj_consume_token(DO);
      r = cmd();
      jj_consume_token(END);
                l = new ASTWhile(exp1, r) ;
                {if (true) return l ;}
      break;
    case IF:
      jj_consume_token(IF);
      exp1 = decl();
      jj_consume_token(THEN);
      l = cmd();
                                              ifstat = new ASTIf(exp1, l) ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        r = cmd();
                                                                                                 ifstat.setElse(r) ;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
          {if (true) return ifstat ;}
      break;
    case DECL:
      jj_consume_token(DECL);
                 d = new ASTDeclStatement() ;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(ID);
                                                         id = token.image ;
        jj_consume_token(EQ);
        exp1 = decl();
                                                     d.addDecl(id, exp1) ;
      }
      jj_consume_token(IN);
      r = cmd();
                                                       d.setStatement(r) ;
      jj_consume_token(END);
                                         {if (true) return d ;}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAR);
      exp1 = decl();
      jj_consume_token(RPAR);
                s = new ASTPrint(exp1) ;
                {if (true) return s ;}
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
                s = new ASTPrintln() ;
                {if (true) return s ;}
      break;
    case FOREACH:
      jj_consume_token(FOREACH);
      jj_consume_token(ID);
                         id = token.image ;
      jj_consume_token(IN);
      exp1 = exp();
      jj_consume_token(DO);
      s = cmd();
      jj_consume_token(END);
                                                                                     {if (true) return new ASTArrayIterator(exp1, id, s);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression decl() throws ParseException {
        IASTExpression l ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
    case VAR:
    case DEREF:
    case TRUE:
    case FALSE:
    case DO:
    case IF:
    case LPAR:
    case FUN:
    case PROC:
    case ARRAY:
    case LBRACK:
    case LENGTH:
    case READINT:
    case READSTR:
    case STRING:
    case CONSTANT:
    case ID:
      l = logicalOr();
                          {if (true) return l ;}
      break;
    case DECL:
      jj_consume_token(DECL);
      l = declExp();
                               {if (true) return l ;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression declExp() throws ParseException {
        ASTDeclExpression d;
        IASTExpression exp, exp2 ;
        String id;
    d = new ASTDeclExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(ID);
    id = token.image;
      jj_consume_token(EQ);
      exp = exp();
    d.addDecl(id, exp);
    }
    jj_consume_token(IN);
    exp2 = exp();
    d.setExpression(exp2);
    jj_consume_token(END);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression logicalOr() throws ParseException {
        IASTExpression l, r ;
    l = logicalAnd();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
      r = logicalAnd();
                                                  l = new ASTOr(l, r) ;
    }
         {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression logicalAnd() throws ParseException {
        IASTExpression l, r, elseExp ;
        ASTIfExpression ife ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
    case VAR:
    case DEREF:
    case TRUE:
    case FALSE:
    case DO:
    case LPAR:
    case FUN:
    case PROC:
    case ARRAY:
    case LBRACK:
    case LENGTH:
    case READINT:
    case READSTR:
    case STRING:
    case CONSTANT:
    case ID:
      l = comp();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        jj_consume_token(AND);
        r = comp();
                                        l = new ASTAnd(l, r) ;
      }
                                                                    {if (true) return l ;}
      break;
    case IF:
      jj_consume_token(IF);
      l = logicalOr();
      jj_consume_token(THEN);
      r = comp();
                                                 ife = new ASTIfExpression(l, r) ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseExp = comp();
                                   ife.setElse(elseExp) ;
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(END);
                                                                      {if (true) return ife ;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression comp() throws ParseException {
        IASTExpression l, r ;
    l = exp();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case DIFF:
      case GREATER:
      case GREATEROREQUAL:
      case SMALLER:
      case SMALLEROREQUAL:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        r = exp();
                                     l = new ASTEqual(l, r) ;
        break;
      case GREATER:
        jj_consume_token(GREATER);
        r = exp();
                                                  l = new ASTGreater(l, r) ;
        break;
      case SMALLER:
        jj_consume_token(SMALLER);
        r = exp();
                                                  l = new ASTSmaller(l, r) ;
        break;
      case GREATEROREQUAL:
        jj_consume_token(GREATEROREQUAL);
        r = exp();
                                                         l = new ASTGreaterOrEqual(l, r) ;
        break;
      case SMALLEROREQUAL:
        jj_consume_token(SMALLEROREQUAL);
        r = exp();
                                                         l = new ASTSmallerOrEqual(l, r) ;
        break;
      case DIFF:
        jj_consume_token(DIFF);
        r = exp();
                                               l = new ASTDiff(l, r) ;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression exp() throws ParseException {
        IASTExpression l,r;
    l = term();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        r = term();
                                     l = new ASTAdd(l,r);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        r = term();
                                          l = new ASTSub(l,r) ;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression term() throws ParseException {
        IASTExpression l,r;
    l = callFun();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVISION:
      case MOD:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        r = factor();
                                              l = new ASTMul(l,r);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        r = factor();
                                                     l = new ASTDiv(l,r);
        break;
      case MOD:
        jj_consume_token(MOD);
        r = factor();
                                                l = new ASTMod(l, r) ;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression callFun() throws ParseException {
  IASTExpression f, e;
  ASTCallFun cf;
  ASTCallArray ca;
  ASTCallRec cr ;
    f = factor();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LBRACK:
      case DOT:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
                                cf = new ASTCallFun(f) ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case NOT:
        case VAR:
        case DEREF:
        case TRUE:
        case FALSE:
        case DO:
        case LPAR:
        case FUN:
        case PROC:
        case ARRAY:
        case LBRACK:
        case LENGTH:
        case READINT:
        case READSTR:
        case STRING:
        case CONSTANT:
        case ID:
          e = factor();
                                                                           cf.addArg(e) ;
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[20] = jj_gen;
              break label_11;
            }
            jj_consume_token(COMMA);
            e = factor();
                                cf.addArg(e) ;
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(ID);
                     cr = new ASTCallRec(f, token.image) ; f = cr ;
        break;
      case LBRACK:
        jj_consume_token(LBRACK);
                   ca = new ASTCallArray(f) ;
        e = factor();
        jj_consume_token(RBRACK);
                                                                        ca.pos(e) ; f = ca ;
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return f ;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression factor() throws ParseException {
        IASTExpression e, l;
        IASTStatement s ;
        ASTRecord r ;
        String id ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      jj_consume_token(CONSTANT);
            e = new ASTNum(Integer.parseInt(token.image)); {if (true) return e;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e = logicalAnd();
      jj_consume_token(RPAR);
      break;
    case ID:
      jj_consume_token(ID);
                e = new ASTId(token.image); {if (true) return e ;}
           {if (true) return e;}
      break;
    case NOT:
      jj_consume_token(NOT);
      e = factor();
                             l = new ASTNot(e) ; {if (true) return l ;}
      break;
    case VAR:
      jj_consume_token(VAR);
      jj_consume_token(LPAR);
      e = logicalOr();
      jj_consume_token(RPAR);
                                              l = new ASTVar(e) ; {if (true) return l ;}
      break;
    case DEREF:
      jj_consume_token(DEREF);
      e = factor();
                               l = new ASTDeref(e) ; {if (true) return l ;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                 l = new ASTBool(true) ; {if (true) return l ;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  l = new ASTBool(false) ; {if (true) return l ;}
      break;
    case READINT:
      jj_consume_token(READINT);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
                                  {if (true) return new ASTReadInt() ;}
      break;
    case READSTR:
      jj_consume_token(READSTR);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
                                  {if (true) return new ASTReadStr() ;}
      break;
    case STRING:
      jj_consume_token(STRING);
                   {if (true) return new ASTString(token.image) ;}
      break;
    case DO:
      jj_consume_token(DO);
      s = cmd();
      jj_consume_token(RETURN);
      e = logicalOr();
      jj_consume_token(END);
                                                        {if (true) return new ASTReturn(s, e) ;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      e = factor();
                               {if (true) return new ASTSymetric(e) ;}
      break;
    case LBRACK:
      jj_consume_token(LBRACK);
                   r = new ASTRecord() ;
      jj_consume_token(ID);
                                                  id = token.image ;
      jj_consume_token(EQ);
      e = logicalOr();
                               r.addRec(id, e) ;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
                                                                   id = token.image ;
        jj_consume_token(EQ);
        e = logicalOr();
                               r.addRec(id, e) ;
      }
      jj_consume_token(RBRACK);
                                                               {if (true) return r ;}
      break;
    case FUN:
      jj_consume_token(FUN);
      e = fun();
                          {if (true) return e ;}
      break;
    case PROC:
      jj_consume_token(PROC);
      e = proc();
                            {if (true) return e ;}
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(LPAR);
      e = exp();
      jj_consume_token(COMMA);
      l = exp();
      jj_consume_token(RPAR);
                                                            {if (true) return new ASTArray(e, l) ;}
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
      jj_consume_token(LPAR);
      e = exp();
      jj_consume_token(RPAR);
                                           {if (true) return new ASTLength(e);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression fun() throws ParseException {
        ASTFun f ;
        IASTExpression e ;
          f = new ASTFun() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
                f.addParam(token.image) ;
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
                                                            f.addParam(token.image) ;
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(IS);
    e = logicalOr();
                               f.setExpression(e) ;
    jj_consume_token(END);
          {if (true) return f ;}
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpression proc() throws ParseException {
        ASTProc p ;
        IASTStatement s ;
          p = new ASTProc() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
                p.addParam(token.image) ;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
                        p.addParam(token.image) ;
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(IS);
    s = state();
                           p.setStatement(s) ;
    jj_consume_token(END);
          {if (true) return p ;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x33e00820,0x4000000,0x80000000,0x0,0x3be00820,0x33e00820,0x0,0x100000,0x80000,0x80000000,0x33e00800,0x780c0,0x780c0,0xc00,0xc00,0x7000,0x7000,0x0,0x0,0x13e00800,0x0,0x0,0x13e00800,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1,0x400,0x1ce1e8,0x8,0x0,0x100000,0x1de1ee,0x1ce1e8,0x100000,0x0,0x0,0x0,0x1ce1e8,0x0,0x0,0x0,0x0,0x0,0x0,0x908,0x400,0x1ce1e8,0x908,0x400,0x1ce1e8,0x400,0x100000,0x400,0x100000,};
   }

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[55];
    for (int i = 0; i < 55; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

                     }
